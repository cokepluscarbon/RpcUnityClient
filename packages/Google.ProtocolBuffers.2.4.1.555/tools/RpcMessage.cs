// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.ckcb.gs {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RpcMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_ckcb_gs_RpcRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcRequest, global::com.ckcb.gs.RpcRequest.Builder> internal__static_com_ckcb_gs_RpcRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_ckcb_gs_RpcRequest_RequestHeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcRequest.Types.RequestHeader, global::com.ckcb.gs.RpcRequest.Types.RequestHeader.Builder> internal__static_com_ckcb_gs_RpcRequest_RequestHeader__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_ckcb_gs_RpcResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcResponse, global::com.ckcb.gs.RpcResponse.Builder> internal__static_com_ckcb_gs_RpcResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcResponse.Types.ResponseHeader, global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.Builder> internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static RpcMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBScGNNZXNzYWdlLnByb3RvEgtjb20uY2tjYi5ncyKDAQoKUnBjUmVxdWVz", 
            "dBI1CgZoZWFkZXIYASACKAsyJS5jb20uY2tjYi5ncy5ScGNSZXF1ZXN0LlJl", 
            "cXVlc3RIZWFkZXISDwoHY29udGVudBgCIAIoDBotCg1SZXF1ZXN0SGVhZGVy", 
            "Eg0KBXJwY0lkGAEgAigFEg0KBXJlcUlkGAIgAigFIngKC1JwY1Jlc3BvbnNl", 
            "EjcKBmhlYWRlchgBIAIoCzInLmNvbS5ja2NiLmdzLlJwY1Jlc3BvbnNlLlJl", 
            "c3BvbnNlSGVhZGVyEg8KB2NvbnRlbnQYAiACKAwaHwoOUmVzcG9uc2VIZWFk", 
          "ZXISDQoFcmVxSWQYASACKAVCGQoLY29tLmNwY2IuZ3NCClJwY01lc3NhZ2U="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_ckcb_gs_RpcRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_ckcb_gs_RpcRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcRequest, global::com.ckcb.gs.RpcRequest.Builder>(internal__static_com_ckcb_gs_RpcRequest__Descriptor,
                new string[] { "Header", "Content", });
        internal__static_com_ckcb_gs_RpcRequest_RequestHeader__Descriptor = internal__static_com_ckcb_gs_RpcRequest__Descriptor.NestedTypes[0];
        internal__static_com_ckcb_gs_RpcRequest_RequestHeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcRequest.Types.RequestHeader, global::com.ckcb.gs.RpcRequest.Types.RequestHeader.Builder>(internal__static_com_ckcb_gs_RpcRequest_RequestHeader__Descriptor,
                new string[] { "RpcId", "ReqId", });
        internal__static_com_ckcb_gs_RpcResponse__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_ckcb_gs_RpcResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcResponse, global::com.ckcb.gs.RpcResponse.Builder>(internal__static_com_ckcb_gs_RpcResponse__Descriptor,
                new string[] { "Header", "Content", });
        internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__Descriptor = internal__static_com_ckcb_gs_RpcResponse__Descriptor.NestedTypes[0];
        internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.ckcb.gs.RpcResponse.Types.ResponseHeader, global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.Builder>(internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__Descriptor,
                new string[] { "ReqId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcRequest : pb::GeneratedMessage<RpcRequest, RpcRequest.Builder> {
    private RpcRequest() { }
    private static readonly RpcRequest defaultInstance = new RpcRequest().MakeReadOnly();
    private static readonly string[] _rpcRequestFieldNames = new string[] { "content", "header" };
    private static readonly uint[] _rpcRequestFieldTags = new uint[] { 18, 10 };
    public static RpcRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcRequest, RpcRequest.Builder> InternalFieldAccessors {
      get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestHeader : pb::GeneratedMessage<RequestHeader, RequestHeader.Builder> {
        private RequestHeader() { }
        private static readonly RequestHeader defaultInstance = new RequestHeader().MakeReadOnly();
        private static readonly string[] _requestHeaderFieldNames = new string[] { "reqId", "rpcId" };
        private static readonly uint[] _requestHeaderFieldTags = new uint[] { 16, 8 };
        public static RequestHeader DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override RequestHeader DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override RequestHeader ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcRequest_RequestHeader__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<RequestHeader, RequestHeader.Builder> InternalFieldAccessors {
          get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcRequest_RequestHeader__FieldAccessorTable; }
        }
        
        public const int RpcIdFieldNumber = 1;
        private bool hasRpcId;
        private int rpcId_;
        public bool HasRpcId {
          get { return hasRpcId; }
        }
        public int RpcId {
          get { return rpcId_; }
        }
        
        public const int ReqIdFieldNumber = 2;
        private bool hasReqId;
        private int reqId_;
        public bool HasReqId {
          get { return hasReqId; }
        }
        public int ReqId {
          get { return reqId_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasRpcId) return false;
            if (!hasReqId) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestHeaderFieldNames;
          if (hasRpcId) {
            output.WriteInt32(1, field_names[1], RpcId);
          }
          if (hasReqId) {
            output.WriteInt32(2, field_names[0], ReqId);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasRpcId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, RpcId);
          }
          if (hasReqId) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, ReqId);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static RequestHeader ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestHeader ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestHeader ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestHeader ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestHeader ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestHeader MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestHeader prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RequestHeader, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestHeader cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private RequestHeader result;
          
          private RequestHeader PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestHeader original = result;
              result = new RequestHeader();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override RequestHeader MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::com.ckcb.gs.RpcRequest.Types.RequestHeader.Descriptor; }
          }
          
          public override RequestHeader DefaultInstanceForType {
            get { return global::com.ckcb.gs.RpcRequest.Types.RequestHeader.DefaultInstance; }
          }
          
          public override RequestHeader BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RequestHeader) {
              return MergeFrom((RequestHeader) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(RequestHeader other) {
            if (other == global::com.ckcb.gs.RpcRequest.Types.RequestHeader.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasRpcId) {
              RpcId = other.RpcId;
            }
            if (other.HasReqId) {
              ReqId = other.ReqId;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestHeaderFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasRpcId = input.ReadInt32(ref result.rpcId_);
                  break;
                }
                case 16: {
                  result.hasReqId = input.ReadInt32(ref result.reqId_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasRpcId {
            get { return result.hasRpcId; }
          }
          public int RpcId {
            get { return result.RpcId; }
            set { SetRpcId(value); }
          }
          public Builder SetRpcId(int value) {
            PrepareBuilder();
            result.hasRpcId = true;
            result.rpcId_ = value;
            return this;
          }
          public Builder ClearRpcId() {
            PrepareBuilder();
            result.hasRpcId = false;
            result.rpcId_ = 0;
            return this;
          }
          
          public bool HasReqId {
            get { return result.hasReqId; }
          }
          public int ReqId {
            get { return result.ReqId; }
            set { SetReqId(value); }
          }
          public Builder SetReqId(int value) {
            PrepareBuilder();
            result.hasReqId = true;
            result.reqId_ = value;
            return this;
          }
          public Builder ClearReqId() {
            PrepareBuilder();
            result.hasReqId = false;
            result.reqId_ = 0;
            return this;
          }
        }
        static RequestHeader() {
          object.ReferenceEquals(global::com.ckcb.gs.RpcMessage.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::com.ckcb.gs.RpcRequest.Types.RequestHeader header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::com.ckcb.gs.RpcRequest.Types.RequestHeader Header {
      get { return header_ ?? global::com.ckcb.gs.RpcRequest.Types.RequestHeader.DefaultInstance; }
    }
    
    public const int ContentFieldNumber = 2;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!hasContent) return false;
        if (!Header.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rpcRequestFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (hasContent) {
        output.WriteBytes(2, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Content);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RpcRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RpcRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcRequest result;
      
      private RpcRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcRequest original = result;
          result = new RpcRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.ckcb.gs.RpcRequest.Descriptor; }
      }
      
      public override RpcRequest DefaultInstanceForType {
        get { return global::com.ckcb.gs.RpcRequest.DefaultInstance; }
      }
      
      public override RpcRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcRequest) {
          return MergeFrom((RpcRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcRequest other) {
        if (other == global::com.ckcb.gs.RpcRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.ckcb.gs.RpcRequest.Types.RequestHeader.Builder subBuilder = global::com.ckcb.gs.RpcRequest.Types.RequestHeader.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::com.ckcb.gs.RpcRequest.Types.RequestHeader Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::com.ckcb.gs.RpcRequest.Types.RequestHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::com.ckcb.gs.RpcRequest.Types.RequestHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::com.ckcb.gs.RpcRequest.Types.RequestHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::com.ckcb.gs.RpcRequest.Types.RequestHeader.DefaultInstance) {
            result.header_ = global::com.ckcb.gs.RpcRequest.Types.RequestHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RpcRequest() {
      object.ReferenceEquals(global::com.ckcb.gs.RpcMessage.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcResponse : pb::GeneratedMessage<RpcResponse, RpcResponse.Builder> {
    private RpcResponse() { }
    private static readonly RpcResponse defaultInstance = new RpcResponse().MakeReadOnly();
    private static readonly string[] _rpcResponseFieldNames = new string[] { "content", "header" };
    private static readonly uint[] _rpcResponseFieldTags = new uint[] { 18, 10 };
    public static RpcResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RpcResponse, RpcResponse.Builder> InternalFieldAccessors {
      get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ResponseHeader : pb::GeneratedMessage<ResponseHeader, ResponseHeader.Builder> {
        private ResponseHeader() { }
        private static readonly ResponseHeader defaultInstance = new ResponseHeader().MakeReadOnly();
        private static readonly string[] _responseHeaderFieldNames = new string[] { "reqId" };
        private static readonly uint[] _responseHeaderFieldTags = new uint[] { 8 };
        public static ResponseHeader DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ResponseHeader DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ResponseHeader ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ResponseHeader, ResponseHeader.Builder> InternalFieldAccessors {
          get { return global::com.ckcb.gs.RpcMessage.internal__static_com_ckcb_gs_RpcResponse_ResponseHeader__FieldAccessorTable; }
        }
        
        public const int ReqIdFieldNumber = 1;
        private bool hasReqId;
        private int reqId_;
        public bool HasReqId {
          get { return hasReqId; }
        }
        public int ReqId {
          get { return reqId_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasReqId) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _responseHeaderFieldNames;
          if (hasReqId) {
            output.WriteInt32(1, field_names[0], ReqId);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasReqId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, ReqId);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static ResponseHeader ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ResponseHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ResponseHeader ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ResponseHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ResponseHeader ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ResponseHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ResponseHeader ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ResponseHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ResponseHeader ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ResponseHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ResponseHeader MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ResponseHeader prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ResponseHeader, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ResponseHeader cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ResponseHeader result;
          
          private ResponseHeader PrepareBuilder() {
            if (resultIsReadOnly) {
              ResponseHeader original = result;
              result = new ResponseHeader();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ResponseHeader MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.Descriptor; }
          }
          
          public override ResponseHeader DefaultInstanceForType {
            get { return global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.DefaultInstance; }
          }
          
          public override ResponseHeader BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ResponseHeader) {
              return MergeFrom((ResponseHeader) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ResponseHeader other) {
            if (other == global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasReqId) {
              ReqId = other.ReqId;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_responseHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _responseHeaderFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasReqId = input.ReadInt32(ref result.reqId_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasReqId {
            get { return result.hasReqId; }
          }
          public int ReqId {
            get { return result.ReqId; }
            set { SetReqId(value); }
          }
          public Builder SetReqId(int value) {
            PrepareBuilder();
            result.hasReqId = true;
            result.reqId_ = value;
            return this;
          }
          public Builder ClearReqId() {
            PrepareBuilder();
            result.hasReqId = false;
            result.reqId_ = 0;
            return this;
          }
        }
        static ResponseHeader() {
          object.ReferenceEquals(global::com.ckcb.gs.RpcMessage.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int HeaderFieldNumber = 1;
    private bool hasHeader;
    private global::com.ckcb.gs.RpcResponse.Types.ResponseHeader header_;
    public bool HasHeader {
      get { return hasHeader; }
    }
    public global::com.ckcb.gs.RpcResponse.Types.ResponseHeader Header {
      get { return header_ ?? global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.DefaultInstance; }
    }
    
    public const int ContentFieldNumber = 2;
    private bool hasContent;
    private pb::ByteString content_ = pb::ByteString.Empty;
    public bool HasContent {
      get { return hasContent; }
    }
    public pb::ByteString Content {
      get { return content_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHeader) return false;
        if (!hasContent) return false;
        if (!Header.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _rpcResponseFieldNames;
      if (hasHeader) {
        output.WriteMessage(1, field_names[1], Header);
      }
      if (hasContent) {
        output.WriteBytes(2, field_names[0], Content);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Header);
      }
      if (hasContent) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Content);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RpcResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RpcResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcResponse result;
      
      private RpcResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcResponse original = result;
          result = new RpcResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.ckcb.gs.RpcResponse.Descriptor; }
      }
      
      public override RpcResponse DefaultInstanceForType {
        get { return global::com.ckcb.gs.RpcResponse.DefaultInstance; }
      }
      
      public override RpcResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RpcResponse) {
          return MergeFrom((RpcResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcResponse other) {
        if (other == global::com.ckcb.gs.RpcResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHeader) {
          MergeHeader(other.Header);
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.Builder subBuilder = global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.CreateBuilder();
              if (result.hasHeader) {
                subBuilder.MergeFrom(Header);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Header = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasContent = input.ReadBytes(ref result.content_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHeader {
       get { return result.hasHeader; }
      }
      public global::com.ckcb.gs.RpcResponse.Types.ResponseHeader Header {
        get { return result.Header; }
        set { SetHeader(value); }
      }
      public Builder SetHeader(global::com.ckcb.gs.RpcResponse.Types.ResponseHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = value;
        return this;
      }
      public Builder SetHeader(global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasHeader = true;
        result.header_ = builderForValue.Build();
        return this;
      }
      public Builder MergeHeader(global::com.ckcb.gs.RpcResponse.Types.ResponseHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasHeader &&
            result.header_ != global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.DefaultInstance) {
            result.header_ = global::com.ckcb.gs.RpcResponse.Types.ResponseHeader.CreateBuilder(result.header_).MergeFrom(value).BuildPartial();
        } else {
          result.header_ = value;
        }
        result.hasHeader = true;
        return this;
      }
      public Builder ClearHeader() {
        PrepareBuilder();
        result.hasHeader = false;
        result.header_ = null;
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public pb::ByteString Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RpcResponse() {
      object.ReferenceEquals(global::com.ckcb.gs.RpcMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
